# Native Clock sample with resource packed html

import sciter, os, strutils, times

OleInitialize(nil)
let api = SAPI()
echo "SciterVersion: ", VersionAsString()

let resource_name: seq[uint8] = @[
    byte 0x53,0x41,0x72,0x00,0x10,0x00,0x00,0x00,0x6e,0x00,0xff,0xff,0x01,0x00,0xff,0xff,0x61,0x00,0xff,0xff,0x02,0x00,0xff,0xff,0x74,0x00,0xff,0xff,0x03,0x00,0xff,0xff,0x69,0x00,0xff,0xff,0x04,0x00,0xff,0xff,0x76,
    0x00,0xff,0xff,0x05,0x00,0xff,0xff,0x65,0x00,0xff,0xff,0x06,0x00,0xff,0xff,0x63,0x00,0xff,0xff,0x07,0x00,0xff,0xff,0x6c,0x00,0xff,0xff,0x08,0x00,0xff,0xff,0x6f,0x00,0xff,0xff,0x09,0x00,0xff,0xff,0x63,0x00,
    0xff,0xff,0x0a,0x00,0xff,0xff,0x6b,0x00,0xff,0xff,0x0b,0x00,0xff,0xff,0x2e,0x00,0xff,0xff,0x0c,0x00,0xff,0xff,0x68,0x00,0xff,0xff,0x0d,0x00,0xff,0xff,0x74,0x00,0xff,0xff,0x0e,0x00,0xff,0xff,0x6d,0x00,0xff,
    0xff,0x0f,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x01,0x00,0xff,0xff,0x01,0x00,0x00,0x00,0x98,0x00,0x00,0x00,0xa6,0x04,0x00,0x00,0x27,0x08,0x00,0x00,0x11,0xef,0xbb,0xbf,0x3c,0x68,0x74,0x6d,0x6c,0x3e,0x0d,0x0a,
    0x20,0x20,0x3c,0x68,0x65,0x61,0x64,0x60,0x09,0x20,0x0b,0x07,0x74,0x69,0x74,0x6c,0x65,0x3e,0x3c,0x2f,0x80,0x07,0xa0,0x14,0x02,0x73,0x74,0x79,0xe0,0x00,0x0c,0x80,0x05,0x01,0x20,0x20,0x40,0x3e,0x1f,0x20,0x7b,
    0x20,0x62,0x61,0x63,0x6b,0x67,0x72,0x6f,0x75,0x6e,0x64,0x3a,0x20,0x23,0x66,0x66,0x66,0x3b,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3a,0x23,0x30,0x30,0x30,0x3b,0x01,0x20,0x7d,0x80,0x2d,0x80,0x05,0x08,0x20,0x20,0x63,
    0x6c,0x6f,0x63,0x6b,0x20,0x7b,0xc0,0x0e,0x07,0x20,0x20,0x62,0x65,0x68,0x61,0x76,0x69,0x20,0x2e,0x07,0x20,0x6e,0x61,0x74,0x69,0x76,0x65,0x2d,0x60,0x21,0x0e,0x3b,0x20,0x2f,0x2a,0x20,0x77,0x69,0x6c,0x6c,0x20,
    0x70,0x61,0x69,0x6e,0x74,0x20,0x51,0x02,0x6e,0x74,0x65,0x20,0x07,0x07,0x6c,0x61,0x79,0x65,0x72,0x20,0x2a,0x2f,0xe0,0x01,0x3f,0x03,0x64,0x69,0x73,0x70,0x20,0x15,0x01,0x3a,0x62,0x60,0x36,0xe0,0x01,0x17,0x05,
    0x73,0x69,0x7a,0x65,0x3a,0x2a,0xe0,0x00,0x10,0xa0,0x86,0x40,0x00,0x80,0x09,0x01,0x3c,0x2f,0xe0,0x03,0xd2,0x11,0x3c,0x73,0x63,0x72,0x69,0x70,0x74,0x20,0x74,0x79,0x70,0x65,0x3d,0x22,0x74,0x65,0x78,0x74,0x20,
    0xfe,0x80,0x13,0x00,0x22,0xa0,0x22,0xe0,0x03,0x05,0x10,0x20,0x20,0x66,0x75,0x6e,0x63,0x74,0x69,0x6f,0x6e,0x20,0x73,0x65,0x6c,0x66,0x2e,0x72,0x21,0x3e,0x02,0x79,0x28,0x29,0xe0,0x01,0xd7,0xc0,0x07,0x04,0x20,
    0x20,0x76,0x61,0x72,0xa0,0xf4,0x03,0x3d,0x20,0x24,0x28,0x60,0x09,0x00,0x29,0xe0,0x00,0x95,0x80,0x1e,0x04,0x70,0x61,0x74,0x68,0x2c,0x60,0x05,0x06,0x4f,0x75,0x74,0x6c,0x69,0x6e,0x65,0xe0,0x06,0x1f,0x02,0x77,
    0x2c,0x68,0xe0,0x06,0x11,0x05,0x63,0x79,0x63,0x6c,0x65,0x73,0x20,0x51,0x00,0x30,0xe0,0x02,0x18,0xe0,0x01,0x09,0x40,0x22,0x04,0x69,0x6d,0x61,0x67,0x65,0x20,0x21,0x60,0x71,0x00,0x2e,0x81,0x5b,0x00,0x49,0x40,
    0x13,0x05,0x28,0x32,0x35,0x2c,0x32,0x35,0xe0,0x03,0x83,0xe0,0x01,0x09,0x80,0x2c,0x61,0x72,0x00,0x42,0xe1,0x00,0xd5,0x20,0x44,0xc0,0xed,0x03,0x28,0x67,0x66,0x78,0xe0,0x02,0xe5,0x40,0x00,0x02,0x69,0x66,0x28,
    0x60,0xba,0x01,0x20,0x29,0xe0,0x02,0x47,0x00,0x20,0xe0,0x05,0x23,0x01,0x20,0x20,0x20,0x37,0x0a,0x2e,0x6e,0x6f,0x53,0x74,0x72,0x6f,0x6b,0x65,0x28,0x29,0xe0,0x05,0x1b,0x20,0x00,0x01,0x2e,0x66,0x21,0xea,0x00,
    0x4c,0x20,0xf9,0x06,0x61,0x72,0x47,0x72,0x61,0x64,0x69,0x21,0xea,0x02,0x28,0x30,0x2c,0x40,0x01,0x01,0x68,0x2c,0x62,0x4c,0x03,0x28,0x32,0x34,0x38,0x20,0xb5,0x20,0xb9,0x02,0x34,0x38,0x29,0xa0,0x12,0x01,0x31,
    0x32,0x20,0x12,0x02,0x30,0x30,0x2c,0x20,0x07,0x00,0x29,0xe0,0x0a,0x52,0x04,0x64,0x72,0x61,0x77,0x50,0x20,0x98,0x00,0x28,0x40,0x9d,0xa1,0x58,0xe0,0x0a,0x26,0x02,0x6e,0x6f,0x46,0x20,0x7b,0x00,0x28,0x41,0x0f,
    0xe0,0x05,0x1c,0x01,0x2f,0x2a,0x40,0xb4,0x00,0x73,0x60,0xb2,0x00,0x43,0x60,0x70,0x22,0x85,0x40,0x06,0x20,0x6f,0xe0,0x00,0x77,0x00,0x20,0xe0,0x0a,0x51,0x80,0x32,0x02,0x57,0x69,0x64,0x20,0x7b,0x04,0x20,0x33,
    0x64,0x69,0x70,0xe0,0x0b,0x24,0xe0,0x04,0x9d,0x01,0x29,0x3b,0xe2,0x03,0xd1,0xa0,0x00,0xe0,0x05,0x10,0x40,0x8b,0x40,0x33,0x81,0xc2,0x61,0xdc,0x21,0x1d,0x00,0x30,0xe0,0x0e,0x59,0xe0,0x03,0x25,0x02,0x77,0x2d,
    0x32,0xe0,0x22,0x28,0x00,0x68,0x20,0x04,0xe0,0x1a,0x2b,0xa0,0x28,0x00,0x3b,0xe0,0x05,0xa6,0xe3,0x02,0x64,0xe0,0x02,0x0a,0xe0,0x01,0x09,0x82,0x5e,0x01,0x61,0x6e,0x20,0x43,0x02,0x74,0x65,0x28,0xe2,0x01,0x55,
    0xe2,0x06,0x52,0x00,0x28,0x22,0xf0,0x00,0x29,0x22,0x75,0x80,0x2e,0x0a,0x62,0x6f,0x78,0x28,0x23,0x64,0x69,0x6d,0x65,0x6e,0x73,0x20,0x2b,0x41,0xa7,0x20,0x22,0xa0,0x00,0x42,0xe8,0x00,0x74,0x20,0x29,0x00,0x44,
    0x20,0x4f,0x05,0x2e,0x74,0x69,0x63,0x6b,0x73,0x20,0x4b,0x02,0x2f,0x20,0x31,0x24,0x79,0x00,0x2e,0xe3,0x03,0x1a,0x21,0xcd,0x08,0x2f,0x20,0x67,0x65,0x74,0x74,0x69,0x6e,0x67,0x62,0xad,0x05,0x73,0x20,0x66,0x72,
    0x6f,0x6d,0xa4,0x72,0x21,0xd7,0x01,0x64,0x65,0xe0,0x03,0x2c,0x40,0x21,0x20,0x06,0x60,0x00,0xc0,0x86,0x80,0x2a,0x02,0x47,0x65,0x74,0x61,0xb5,0x21,0x51,0x00,0x2c,0x20,0xa5,0x08,0x2c,0x74,0x2c,0x20,0x66,0x61,
    0x6c,0x73,0x65,0xe0,0x05,0x96,0x40,0x3f,0xa2,0x71,0xe0,0x19,0x3f,0x02,0x74,0x72,0x75,0xe0,0x06,0x3e,0x80,0x30,0x06,0x72,0x65,0x66,0x72,0x65,0x73,0x68,0x62,0x99,0x20,0x14,0xa0,0x00,0x23,0x6e,0x01,0x2b,0x2b,
    0xa3,0xfe,0x00,0x3e,0x40,0xe8,0xe1,0x06,0x3b,0x20,0x3d,0x80,0x1c,0xe4,0x05,0x1b,0x40,0x00,0x01,0x67,0x63,0x20,0x4b,0x41,0x08,0x04,0x66,0x6f,0x72,0x63,0x65,0x20,0x0e,0x02,0x20,0x74,0x6f,0x20,0xfa,0x04,0x6c,
    0x6c,0x65,0x63,0x74,0x60,0xb2,0x00,0x73,0xe1,0x02,0xaa,0xe1,0x04,0xc1,0x07,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x60,0xab,0x60,0x42,0xa1,0xc3,0x03,0x20,0x65,0x6e,0x64,0x20,0x6c,0x02,0x73,0x6c,0x79,0xe0,
    0x01,0x2c,0x00,0x7d,0x40,0xb0,0xc0,0x0e,0xa0,0x44,0x80,0x05,0x25,0x72,0x65,0x51,0x65,0x50,0x01,0x3c,0x2f,0xa6,0x73,0x04,0x3c,0x62,0x6f,0x64,0x79,0x20,0x07,0x60,0x14,0x1f,0x68,0x32,0x3e,0xd0,0x97,0xd0,0xb0,
    0xd0,0xb2,0xd0,0xb5,0xd1,0x80,0xd1,0x88,0xd0,0xb5,0xd0,0xbd,0xd1,0x8b,0xd0,0xb9,0x20,0xd0,0xbf,0xd1,0x80,0xd0,0xb8,0xd0,0xbc,0x40,0x16,0x00,0x20,0x40,0x0a,0x03,0xd1,0x81,0xd0,0xbe,0x20,0x25,0x02,0xb0,0xd0,
    0xbd,0x20,0x0b,0x01,0x8f,0x20,0x20,0x1b,0x03,0xb7,0x20,0xd0,0xba,0x20,0x13,0x02,0xb4,0xd0,0xb0,0x20,0x5a,0x00,0x32,0x20,0x50,0x20,0x4e,0x13,0x70,0x3e,0xd0,0xa1,0xd0,0xbc,0x3a,0x20,0x73,0x64,0x6b,0x2f,0x69,
    0x6e,0x63,0x6c,0x75,0x64,0x65,0x2f,0xc6,0x70,0x00,0x73,0xe0,0x00,0x09,0x00,0x5f,0x42,0xdd,0x22,0x19,0x06,0x2e,0x63,0x70,0x70,0x3c,0x2f,0x70,0xc0,0x3a,0x01,0x46,0x61,0x21,0x25,0x61,0x8b,0x42,0x3a,0x01,0x73,
    0x20,0x40,0x25,0x03,0x6e,0x20,0x62,0x79,0xc2,0x35,0x04,0x73,0x69,0x64,0x65,0x20,0x26,0x01,0xe6,0x04,0x9b,0xe0,0x02,0x3f,0x00,0x53,0x60,0xec,0x01,0x20,0x69,0x80,0x39,0x20,0x5f,0x02,0x20,0x74,0x68,0x21,0x76,
    0x03,0x72,0x61,0x70,0x68,0x40,0x36,0xe7,0x01,0x36,0x80,0x39,0x02,0x20,0x75,0x73,0x40,0x23,0x81,0x88,0x04,0x67,0x65,0x6e,0x65,0x72,0x21,0x60,0x00,0x64,0x40,0x29,0xe0,0x02,0x6f,0xe0,0x02,0x5e,0x07,0xd0,0xa0,
    0xd0,0xb5,0xd1,0x81,0xd1,0x83,0x21,0x27,0x07,0x81,0xd1,0x8b,0x20,0xd1,0x83,0xd0,0xbf,0x21,0x0e,0x41,0x02,0x61,0x16,0x20,0x12,0x02,0xd0,0xb2,0x20,0x20,0x22,0x05,0x85,0xd0,0xb5,0x20,0xd1,0x84,0x20,0x12,0x02,
    0xb9,0xd0,0xbb,0x80,0x3e,0x60,0x40,0x60,0xd8,0x27,0xe5,0x80,0x07,0x40,0x14,0x01,0x3c,0x2f,0xa1,0x89,0x21,0x3f,0x27,0xd9,0x20,0x08,0x02,0x20,0x0d,0x0a
]

assert SciterSetOption(nil, SCITER_SET_SCRIPT_RUNTIME_FEATURES,
                       ALLOW_FILE_IO or ALLOW_EVAL or ALLOW_SYSINFO or
                       ALLOW_SOCKET_IO ) # needs for conection to inspector

SciterDebug()

var harc: HSARCHIVE
proc createBehaviorClock(target: LPSCN_ATTACH_BEHAVIOR, fn: proc()): SCDOM_RESULT {.discardable.}

proc OnLoadData(params: LPSCN_LOAD_DATA): SC_LOAD_DATA_RETURN_CODES = 
  echo "LPSCN_LOAD_DATA: ", params.uri, "-",
    cast[SciterResourceType](params.dataType)
  var uri = $params.uri
  echo "uri: ", $uri
  if uri.startsWith(archPref):
    # load resource starting with our schema
    var url = uri[archPref.len..^1]
    var fileData = harc.GetArchiveItem(url) #echo fileData
    var len = fileData[1]
    if len > 0:
      # use loaded resource
      echo "file downloading..."
      discard params.hwnd.DataReady(url, 
                                  toopenarray(fileData[0], 0, fileData[1]-1 ))
    else:
      # failed to load
      echo "error: failed to load ", params.uri
      #  but fallback to Sciter anyway  
    return LOAD_OK
  else:
    return LOAD_OK # else don't conecting to Inspector

proc OnAttachBehavior(params: LPSCN_ATTACH_BEHAVIOR) =
    echo "LPSCN_ATTACH_BEHAVIOR: " , "HE:", repr params.element, " ", params.behaviorName
    if params.behaviorName == "native-clock": 
        echo "native-clock: ", createBehaviorClock(params, proc() = echo "native-clock behavior" )

proc sciterHostCallback(params: LPSCITER_CALLBACK_NOTIFICATION;
                        callbackParam: pointer): SC_LOAD_DATA_RETURN_CODES {.stdcall.} =  
    if params.code == SC_LOAD_DATA:
        return OnLoadData(cast[LPSCN_LOAD_DATA](params))  
    if params.code == SC_ATTACH_BEHAVIOR:
        OnAttachBehavior(cast[LPSCN_ATTACH_BEHAVIOR](params))
        return LOAD_OK

var frame = SciterCreateWindow(SW_MAIN or SW_TITLEBAR or SW_CONTROLS, 
                            defaultRect, nil, nil, nil)

assert SciterSetOption(frame, SCITER_SET_DEBUG_MODE, 1)
SciterSetCallback(frame, sciterHostCallback, nil)

proc createBehaviorClock(target: LPSCN_ATTACH_BEHAVIOR,
                        fn: proc()): SCDOM_RESULT {.discardable.} =
    var eh = newEventHandler()
    eh.subscription = proc(he: HELEMENT, params: var cuint): uint =
        echo "clock subscription"
        #if comment then full subscription events
        params = HANDLE_DRAW or HANDLE_TIMER
        return 1

    eh.attached = proc(he: HELEMENT) =
        #dom::element(he).start_timer(1000)
        #assert he.SciterSetTimer(1000, 0) == SCDOM_OK      
        echo "clock attached"
        discard
    
    eh.handle_timer = proc(he: HELEMENT, params: ptr TIMER_PARAMS): uint =
        #dom::element(he).refresh() # refresh element's area                        
        var rc = Rect()
        he.SciterGetElementLocation(rc.addr, SELF_RELATIVE or CONTENT_BOX)
        he.SciterRefreshElementArea(rc)

        echo "clock timer event"
        return 1 # keep ticking

    eh.handle_draw = proc(he: HELEMENT, params: ptr DRAW_PARAMS): uint =
        if not params.cmd == DRAW_CONTENT: return 0
        let g = gapi()
        let gfx = params.gfx
        
        let PI = 3.141592653f
        let w = float(params.area.right - params.area.left)
        let h = float(params.area.bottom - params.area.top)

        let scale = if w < h: w / 300.0 else: h / 300.0
                
        let timeinfo = now()

        discard g.gStateSave(gfx)
  
        discard g.gTranslate(gfx, (float)(params.area.left) + w/2.0, (float)(params.area.top) + h/2.0)
        discard g.gScale(gfx, scale, scale)
        discard g.gRotate(gfx, -PI/2, nil, nil)
        discard g.gLineColor(gfx, g.RGBA(0, 0, 0))
        discard g.gLineWidth(gfx, 8.0)
        discard g.gLineCap(gfx, SCITER_LINE_CAP_ROUND)
         
        # Hour marks
        discard g.gStateSave(gfx)
        discard g.gLineColor(gfx, g.RGBA(0x32, 0x5F, 0xA2))
        for i in 0 .. 11:
            discard g.gRotate(gfx, PI/6, nil, nil)
            discard g.gLine(gfx, 137.0, 0, 144.0, 0.0)
        discard g.gStateRestore( gfx )
            
        # Minute marks
        discard g.gStateSave(gfx)
        discard g.gLineWidth(gfx,3.0)
        discard g.gLineColor(gfx, g.RGBA(0xA5, 0x2A, 0x2A))
        for i in 0 .. 59:
            if ( i mod 5 != 0):
              discard g.gLine(gfx, 143,0,146,0)
            discard g.gRotate(gfx, PI/30.0, nil, nil)
        discard g.gStateRestore(gfx)
  
        var sec = (float)(timeinfo.second.int32)
        var min = (float)(timeinfo.minute.int32)
        var hr  = (float)(timeinfo.hour)
        hr = if hr >= 12: hr - 12 else: hr
    
        # draw Hours
        discard g.gStateSave(gfx)
        discard g.gRotate(gfx, hr*(PI/6.0) + (PI/360.0)*min + (PI/21600.0)*sec, nil, nil)
        discard g.gLineWidth(gfx,14)
        discard g.gLineColor(gfx, g.RGBA(0x32,0x5F,0xA2))
        discard g.gLine(gfx, -20, 0, 70, 0)
        discard g.gStateRestore(gfx)
  
        # draw Minutes
        discard g.gStateSave(gfx)
        discard g.gRotate(gfx, (PI/30.0)*min + (PI/1800.0)*sec, nil, nil)
        discard g.gLineWidth(gfx, 10)
        discard g.gLineColor(gfx, g.RGBA(0x32, 0x5F, 0xA2))
        discard g.gLine(gfx, -28, 0, 100, 0)
        discard g.gStateRestore(gfx)
        
        # draw seconds
        discard g.gStateSave(gfx)
        discard g.gRotate(gfx, sec * PI/30.0, nil, nil)
        
        discard g.gLineColor(gfx, g.RGBA(0xD4,0,0))
        discard g.gFillColor(gfx, g.RGBA(0xD4,0,0))
        discard g.gLineWidth(gfx, 6.0)
        discard g.gLine(gfx, -30.0, 0.0, 83.0, 0.0)
        discard g.gEllipse(gfx, 0, 0, 10, 10)
    
        discard g.gFillColor(gfx, g.RGBA(0,0,0))
        discard g.gEllipse(gfx, 95.0, 0.0, 10.0, 10.0)
        discard g.gStateRestore(gfx)
        
        discard g.gStateRestore(gfx)
        return 0   

    return target.element.Attach(eh, HANDLE_ALL)

#[var nativeGetPath: proc (vx: ptr Value; vy: ptr Value; vw: ptr Value; vh: ptr Value, vt: ptr Value; vclosed: ptr Value): Value =
    var x = vx.getFloat()
    var y = vy.getFloat()
    var w = vw.getFloat()
    var h = vh.getFloat()
    var t = vt.getFloat()
    var closed = vclosed.getBool()

    var samples: array[6, float]
    var sx: array[6, float], sy: array[6, float]
    var dx = w/5.0
    
    samples[0] = (1+sinf(t*1.2345+cosf(t*0.33457)*0.44))*0.5
    samples[1] = (1+sinf(t*0.68363+cosf(t*1.3)*1.55))*0.5
    samples[2] = (1+sinf(t*1.1642+cosf(t*0.33457)*1.24))*0.5
    samples[3] = (1+sinf(t*0.56345+cosf(t*1.63)*0.14))*0.5
    samples[4] = (1+sinf(t*1.6245+cosf(t*0.254)*0.3))*0.5
    samples[5] = (1+sinf(t*0.345+cosf(t*0.03)*0.6))*0.5

    for i in 0 .. 5:
        sx[i] = x+i*dx
        sy[i] = y+h*samples[i]*0.8	    

    # creating path:
    var p = createPath() # sciter::path::create()

    #p.move_to(sx[0], sy[0], false)
    #[for i in 0 .. 5:
        p.bezier_curve_to(sx[i-1]+dx*0.5f,sy[i-1], sx[i]-dx*0.5f,sy[i], sx[i],sy[i],false)

    if( closed ):
        p.line_to(x+w,y+h,false)
        p.line_to(x+0,y+h,false)
        p.close_path()

    # // wrap the path into sciter::value;    
    return p.to_value()]#
]#

harc = SetResourceArchive(resource_name)

echo "set nativeImage: ", frame.defineScriptingFunction("nativeImage",
    proc(args: seq[ptr Value]): Value =
        echo "nativeImage:", $(args)
        return newValue("") )

#assert frame.SciterLoadFile(archPref & "nativeClock.htm")
assert frame.SciterLoadFile(getCurrentDir() / "res/nativeClock.htm")

frame.setTitle("Часики")
frame.run